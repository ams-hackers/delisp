// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`convertType Effects should convert effect with multiple labels 1`] = `
TypeWithWildcards {
  "body": Object {
    "node": Object {
      "args": Array [
        Object {
          "node": Object {
            "extends": Object {
              "node": Object {
                "extends": Object {
                  "node": Object {
                    "tag": "empty-row",
                  },
                },
                "label": "async",
                "labelType": Object {
                  "node": Object {
                    "name": "void",
                    "tag": "constant",
                  },
                },
                "tag": "row-extension",
              },
            },
            "label": "console",
            "labelType": Object {
              "node": Object {
                "name": "void",
                "tag": "constant",
              },
            },
            "tag": "row-extension",
          },
        },
      ],
      "op": Object {
        "node": Object {
          "name": "effect",
          "tag": "constant",
        },
      },
      "tag": "application",
    },
  },
}
`;

exports[`convertType Effects should convert empty effect 1`] = `
TypeWithWildcards {
  "body": Object {
    "node": Object {
      "args": Array [
        Object {
          "node": Object {
            "tag": "empty-row",
          },
        },
      ],
      "op": Object {
        "node": Object {
          "name": "effect",
          "tag": "constant",
        },
      },
      "tag": "application",
    },
  },
}
`;

exports[`convertType Effects should convert open effect with multiple labels 1`] = `
TypeWithWildcards {
  "body": Object {
    "node": Object {
      "args": Array [
        Object {
          "node": Object {
            "extends": Object {
              "node": Object {
                "extends": Object {
                  "node": Object {
                    "name": "a",
                    "tag": "type-variable",
                    "userSpecified": false,
                  },
                },
                "label": "async",
                "labelType": Object {
                  "node": Object {
                    "name": "void",
                    "tag": "constant",
                  },
                },
                "tag": "row-extension",
              },
            },
            "label": "console",
            "labelType": Object {
              "node": Object {
                "name": "void",
                "tag": "constant",
              },
            },
            "tag": "row-extension",
          },
        },
      ],
      "op": Object {
        "node": Object {
          "name": "effect",
          "tag": "constant",
        },
      },
      "tag": "application",
    },
  },
}
`;

exports[`convertType Effects should convert simple effect with one labrel 1`] = `
TypeWithWildcards {
  "body": Object {
    "node": Object {
      "args": Array [
        Object {
          "node": Object {
            "extends": Object {
              "node": Object {
                "tag": "empty-row",
              },
            },
            "label": "console",
            "labelType": Object {
              "node": Object {
                "name": "void",
                "tag": "constant",
              },
            },
            "tag": "row-extension",
          },
        },
      ],
      "op": Object {
        "node": Object {
          "name": "effect",
          "tag": "constant",
        },
      },
      "tag": "application",
    },
  },
}
`;

exports[`convertType should detect incorrect types 1`] = `
"
file:1:1: Not a valid type
1
^"
`;

exports[`convertType should detect incorrect types 2`] = `
"
file:1:1: Not a valid type
\\"hello\\"
^"
`;

exports[`convertType should detect incorrect types 3`] = `
"
file:1:2: Not a valid type
(1 2 3)
-^"
`;

exports[`convertType should detect incorrect types 4`] = `
"
file:1:2: Not a valid type
(\\"hello\\" \\"world\\")
-^"
`;

exports[`convertType should detect incorrect types 5`] = `
"
file:1:10: Expected close parenthesis, number or symbol, double quote, list, open parenthesis, open square bracket, or open curly brace
(effect 1
---------^"
`;

exports[`convertType should read extensible record 1`] = `
TypeWithWildcards {
  "body": Object {
    "node": Object {
      "args": Array [
        Object {
          "node": Object {
            "extends": Object {
              "node": Object {
                "extends": Object {
                  "node": Object {
                    "name": "a",
                    "tag": "type-variable",
                    "userSpecified": false,
                  },
                },
                "label": ":y",
                "labelType": Object {
                  "node": Object {
                    "name": "number",
                    "tag": "constant",
                  },
                },
                "tag": "row-extension",
              },
            },
            "label": ":x",
            "labelType": Object {
              "node": Object {
                "name": "number",
                "tag": "constant",
              },
            },
            "tag": "row-extension",
          },
        },
      ],
      "op": Object {
        "node": Object {
          "name": "record",
          "tag": "constant",
        },
      },
      "tag": "application",
    },
  },
}
`;
