// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Pretty Printer shold print definitions beautifully 1`] = `
"
(define x 10)"
`;

exports[`Pretty Printer shold print definitions beautifully 2`] = `
"
(define x
  (lambda (*context*
           aaa
           bbb
           ccc
           ddd
           eee
           fff
           ggg
           hhh
           iii
           jjj
           kkk
           lll
           mmm
           nnn
           ooo
           ppp
           qqq
           rrr
           sss
           ttt
           uuu
           vvv
           www
           xx)
    xxx))"
`;

exports[`Pretty Printer should align nested function calls 1`] = `
"
(funcall *context*
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         (fxyz *context* 0 111 222)
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa
         aaaaa)"
`;

exports[`Pretty Printer should align nested function calls 2`] = `
"
(funcall *context* aaaaa aaaaa aaaaa (fxyz *context* 0 111 222))"
`;

exports[`Pretty Printer should align nested function calls 3`] = `
"
(funcall *context*
         aaaaa
         aaaaa
         aaaaa
         (fxyz *context*
               0
               111
               222
               333
               444
               555
               666
               777
               888
               999
               aaa
               bbb
               xxx
               yyy
               zzz
               www
               uuu
               ttt))"
`;

exports[`Pretty Printer should break long bodies in match expressions 1`] = `
"
(match value
  ({:version number}
    (+ *context*
       1234
       1234
       1234
       1234
       1234
       123
       1234
       1234
       1234
       1234
       1234
       1234
       number))
  ({:unrelesed _} () number))"
`;

exports[`Pretty Printer should insert newlines 1`] = `
"
aaa
bbb
ccc"
`;

exports[`Pretty Printer should place all arguments of a function call in the next line if necessary 1`] = `
"
(this-is-a-very-long-and-ugly-function-name
 *context*
 (axbxcxd *context*
          (a *context* b c d)
          (a *context* b c d)
          (a *context* b c d)
          (a *context* b c d)
          (a *context* b c d)))"
`;

exports[`Pretty Printer should preserve some empty lines 1`] = `
"
aaa
bbb

ccc
ddd

eee"
`;

exports[`Pretty Printer should pretty match expressions 1`] = `
"
(match value
  ({:version number} number)
  ({:unrelesed _} number))"
`;

exports[`Pretty Printer should pretty print a combination of lambda and function call 1`] = `
"
(foo *context*
     (lambda (*context* x y z)
       (funcall *context*
                aaaaa
                aaaaa
                aaaaa
                (fxyz *context*
                      0
                      111
                      222
                      333
                      444
                      555
                      666
                      777
                      888
                      999
                      aaa
                      bbb
                      xxx
                      yyy
                      zzz
                      www
                      uuu
                      ttt))))"
`;

exports[`Pretty Printer should pretty print do blocks 1`] = `
"
(do
  (print *context* \\"hello\\")
  (print *context* \\"bye bye!\\"))"
`;

exports[`Pretty Printer should pretty print tag forms 1`] = `
"
(case :version 0)"
`;

exports[`Pretty Printer should pretty print tag forms with large expressions 1`] = `
"
(case :version
  this-is-a-extremely--long-and-annoying-variable-name-in-order-to-break-the-line)"
`;

exports[`Pretty Printer should pretty print type declarations 1`] = `
"
(type Person {:name string :age number :books [{:name string :author string}]})"
`;

exports[`Pretty Printer should pretty print type type applications 1`] = `
"
(the (a) 10)"
`;

exports[`Pretty Printer should print amll real code beautifully 1`] = `
"
(define bq-frob
  (lambda (*context* x)
    (and *context*
         (consp *context* x)
         (or *context*
             (eq *context* (car *context* x) *comma*)
             (eq *context* (car *context* x) *comma-atsign*)))))"
`;

exports[`Pretty Printer should print conditional expressions nicely 1`] = `
"
(if true 1 2)"
`;

exports[`Pretty Printer should print conditional expressions nicely 2`] = `
"
(if aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa
    1
    2)"
`;

exports[`Pretty Printer should print deeply nested function calls nicely 1`] = `
"
(function-call-1 *context*
                 (function-call-2 *context*
                                  (function-call-3 *context*
                                                   (function-call-4
                                                    *context*
                                                    (function-call-5 *context*
                                                                     3
                                                                     4
                                                                     5
                                                                     6
                                                                     7))))
                 30)"
`;

exports[`Pretty Printer should print empty records 1`] = `
"
{}"
`;

exports[`Pretty Printer should print empty vectors 1`] = `
"
[]"
`;

exports[`Pretty Printer should print extended records 1`] = `
"
{:foo 1 | bar}"
`;

exports[`Pretty Printer should print lambda abstractions beautifully 1`] = `
"
(lambda (*context* aaa bbb ccc) xxx)"
`;

exports[`Pretty Printer should print lambda abstractions beautifully 2`] = `
"
(lambda (*context*
         aaa
         bbb
         ccc
         ddd
         eee
         fff
         ggg
         hhh
         iii
         jjj
         kkk
         lll
         mmm
         nnn
         ooo
         ppp
         qqq)
  xxx)"
`;

exports[`Pretty Printer should print lambda abstractions beautifully 3`] = `
"
(lambda (*context*
         aaa
         bbb
         ccc
         ddd
         eee
         fff
         ggg
         hhh
         iii
         jjj
         kkk
         lll
         mmm
         nnn
         ooo
         ppp
         qqq
         rrr
         sss
         ttt
         uuu
         vvv
         www
         xx)
  xxx)"
`;

exports[`Pretty Printer should print lambda with multiple forms 1`] = `
"
(define hello
  (lambda (*context* x)
    (print *context* x)
    (print *context* x)
    (print *context* x)
    (print *context* x)
    (print *context* x)
    (print *context* x)))"
`;

exports[`Pretty Printer should print let expressions nicely 1`] = `
"
(let {x 10
      y 20}
  (+ *context* x y))"
`;

exports[`Pretty Printer should print records with nested expressions 1`] = `
"
{:xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx 20
 :z (* *context* 10 (+ *context* 1 2))}"
`;

exports[`Pretty Printer should some real code 1`] = `
"
(define maptree
  (lambda (*context* fn x)
    (if (atom *context* x)
        (funcall *context* fn x)
        (let {a (funcall *context* fn (car *context* x))
              d (maptree *context* fn (cdr *context* x))}
          (if (and *context*
                   (eql *context* a (car *context* x))
                   (eql *context* d (cdr *context* x)))
              x
              (cons *context* a d))))))"
`;
