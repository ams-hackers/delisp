(define >>>
  (lambda (f1 f2)
    (lambda (x) (f2 (f1 x)))))

(define over
  (lambda (lens fn x)
    (multiple-value-bind (current change)
        (lens x)
      (change (fn current)))))

(define constantly
  (lambda (x) (lambda (y) x)))

(define set
  (lambda (lens value container)
    (over lens
          (constantly value)
          container)))

(define >>
  (lambda (outer inner)
    (lambda (outer-container)
      (multiple-value-bind (inner-container outer-update)
          (outer outer-container)
        (multiple-value-bind (value inner-update)
            (inner inner-container)
          (values value
                  (>>> inner-update
                       outer-update)))))))

(define fst
  (lambda (p)
    (values (%fst p)
            (lambda (new-value)
              (pair new-value (%snd p))))))

(define snd
  (lambda (p)
    (values (%snd p)
            (lambda (new-value)
              (pair (%fst p) new-value)))))

(define string-ref
  (lambda (k) (substring k (+ k 1))))

(assert
 (string= "e" ((string-ref 1) "delisp"))
 "Expect string-ref lenses to work")